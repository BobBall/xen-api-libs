(** Type-safe UUIDs.
    Probably need to refactor this; UUIDs are used in two places:
    1. to uniquely name things across the cluster
    2. as secure session IDs
    There is the additional constraint that current Xen tools use 
    a particular format of UUID (the 16 byte variety generated by fresh ())
*)

(** A 128-bit UUID referencing a value of type 'a. *)
type 'a t

(** A 512-bit UUID. *)
type cookie

(** Create a fresh (unique!) UUID *)
val make_uuid : unit -> 'a t

(** Create a fresh secure (bigger and hopefully unguessable) UUID *)
val make_cookie : unit -> cookie

(** Create a type-safe UUID. *)
val of_string : string -> 'a t

(** Marshal a UUID to a (type-unsafe) string. *)
val to_string : 'a t -> string

val null : 'a t

(* deprecated alias for previous one *)
val uuid_of_string : string -> 'a t
val string_of_uuid : 'a t -> string

val cookie_of_string : string -> cookie

val string_of_cookie : cookie -> string

val uuid_of_int_array : int array -> 'a t

val int_array_of_uuid : 'a t -> int array

(* check if a string is a uuid *)
val is_uuis : string -> bool
